<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

<script>
// Custom validation rules
$.validator.addMethod("phoneNumber", function(value, element) {
    return this.optional(element) || /^[\+]?[1-9][\d]{0,15}$/.test(value);
}, "Please enter a valid phone number.");

$.validator.addMethod("strongPassword", function(value, element) {
    return this.optional(element) ||
            /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[$!%*?&])[A-Za-z\d$!%*?&]{8,}$/.test(value);
}, "Password must contain at least 8 characters with uppercase, lowercase, number and special character.");

// Apply validation rules
$("input[type='tel'], input[name*='Phone']").rules("add", {
    phoneNumber: true
});

$("input[type='password'][name*='Password']:not([name*='Current'])").rules("add", {
    strongPassword: true
});

// Real-time validation feedback
$('input, select, textarea').on('blur', function() {
    $(this).valid();
});

// Custom error placement
$.validator.setDefaults({
    errorElement: 'span',
    errorClass: 'text-danger',
    errorPlacement: function(error, element) {
        error.addClass('invalid-feedback');
        element.closest('.form-group, .mb-3').append(error);
        element.addClass('is-invalid');
    },
    success: function(label, element) {
        $(element).removeClass('is-invalid').addClass('is-valid');
        label.remove();
    }
});

// Form submission animation
$('form').on('submit', function() {
    if ($(this).valid()) {
        const submitBtn = $(this).find('button[type="submit"]');
        const originalText = submitBtn.html();
        
        submitBtn.html('<span class="spinner-border spinner-border-sm me-2"></span>Saving...')
                .prop('disabled', true);
        
        // Re-enable after 10 seconds (fallback)
        setTimeout(() => {
            submitBtn.html(originalText).prop('disabled', false);
        }, 10000);
    }
});
</script>